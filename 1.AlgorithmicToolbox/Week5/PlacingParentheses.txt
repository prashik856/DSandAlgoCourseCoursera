Placing Parentheses:

Problem Overview:
Consider the following example:
How to place parenthesis in an expression:
1 + 2 - 3 x 4 - 5
to maximize it's value?

Example:
(((( 1 + 1) - 3 ) x 4 ) - 5 ) = -5
another example
((1+2) - ((3x4) -5 )) = -4

But the optimal solution looks like this:
((1+2) - (3x(4-5))) = 6
{In my opinion, we are trying to get an optimal series of operations that we want to do to get the maximum value.}
So, there are 4 arithmetic operations in here, so we can choose any of the 4 operations to be the 1st, 
then we can select the remaining operation to be 2nd, and similarly 3rd and 4th.

What about?
5 - 8 + 7 x 4 - 8 + 9
But, man this does not scale well. As the number of operations increases, the number of combinations increases.

Soon:
We'll design an efficient dynamic programming algorithm to find the answer.



Subproblems:
Placing Parentheses:
Input: A sequence of digits d(1), ..., d(n) and a sequence of operations op(1), ..., op(n-1) that belongs to {+,-,x}.
Output: An order of applying these operations that maxmizes the value of the expression.
    d(1) op(1) d(2) op(2) .... op(n-1) d(n).

Inuition:
Assume that the last operation in an optimal parenthesizing of
5 - 8 + 7 x 4 - 8 + 9 is x:
    (5-8+7)x(4-8+9).
It would help to know optimal values for subexpressions 5-8+7 and 4-8+9.

However:
We need to keep track for both the minimal and the maximal values of subexpressions!.

Example: (5-8+7) x (4-8+9)
min(5-8+7) = (5-(8+7)) = -10
max(5-8+7) = ((5-8) + 7) = 4
min(4-8+9) = (4-(8+9)) = -13
max(4-8+9) = ((4-8)+9) = 5
Now: max value is = -10 * -13 = 130

Subproblems:
Let E(i,j) be the subexpression
    d(i) op(i) ... op(j-1) dj
Subproblems = maximum value of E(i,j) M(i,j)
              minimum value of E(i,j) m(i,j)

Recurrence Relation
M(i,j) = max        {
        i<=k<=j-1
                    M(i,k) op(k) M(k+1,j)
                    M(i,k) op(k) m(k+1,j)
                    m(i,k) op(k) M(k+1,j)
                    m(i,k) op(k) m(k+1,j)                    
                    }

m(i,j) = min        {
        i<=k<=j-1
                    M(i,k) op(k) M(k+1,j)
                    M(i,k) op(k) m(k+1,j)
                    m(i,k) op(k) M(k+1,j)
                    m(i,k) op(k) m(k+1,j)  
                    }



Algorithm:
MinAndMax(i,j)
min <- +INF
max <- -INF
for k from i to j-1:
    a <- M(i,k) op(k) M(k+1,j)
    b <- M(i,k) op(k) m(k+1,j)
    c <- m(i,k) op(k) M(k+1,j)
    d <- m(i,k) op(k) m(k+1,j)
    min <- min(min, a,b,c,d)
    max <- max(max, a,b,c,d)
return (min,max)

Order of Subproblems
-> When computing M(i,j), the values of M(i,k) and M(k+1, j) should already be computed.
-> Solve all subproblems in order of (j-i)


Parentheses(d(1) op(1) d(2) op(2) ... d(n)):
for i from 1 to n:
    m(i,i) <- d(i), M(i,i) <- d(i)
for s from 1 to n-1:
    for i from 1 to n-s:
        j <- i + s
        m(i,j), M(i,j) <- MinAndMax(i,j)
return M(1,n)

Running time: O(n^3)



Reconstructing a Solution:
How was Max value computed?
e.g. 5 - 8 + 7 x 4 - 8 + 9
Now:
M(1,6) = M(1,1) - M(2,6)