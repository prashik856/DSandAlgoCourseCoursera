Trees:
I ate the cake
Now, we can have divided this into, Verb, Noun Pronoun, etc...

Also used for Geography Hierarchy.
Also used in Animal Kingdom (partial).

Abstract Syntax Tree for Code
while x<0:
    x = x+2
    foo(x)


1) Binary Search Tree:
Each node has two children.

We have only 1 root node.
The value of root node >= All of it's node values in left child.
The value of root noe < All of it's node values in right child.

The same thing is true for every node in the binary tree.

BST allows us to search very quickly.
It's a lot like binary search in a sorted array.

Definition:
A tree is
-> Empty, or
-> a node with -> a key, and 
                -> a list of child trees.
This is a recursive definition.


2)Simple Tree
Empty Tree:

Tree with one node:
Fred

Tree with two nodes:
Fred -- Sally

In CS, Trees usually grows down, so Parent is above child.
That's why in our example, Fred is above Sally.

Terminology:
Root: Top node in the tree.
Child has a line down directly from a parent.
Ancestor: parent, or parent of parent, etc.
Descendant: child, or child of child, etc.
Sibling: Sharing the same parent.
Leaf: node with no children.
Interior node: Non-leaf nodes.
Level: 1+ num edges between root and node.
    Root node is always at Level 1.
    First children have level 2.
    Children of children of root will have level 3.
Height: Maximum depth of subtree node and farthest leaf. 
    e.g. Height of Root is the farthest down descendant.
    Root has height 1.
    So first children with no childs will have height 2.
Forest: Collection of trees.

Now, a Node Contains:
-> Key
-> children: list of children nodes
-> (optional) parent.

For binary tree, node contains:
-> key
-> left
-> right
-> (optional) parent

Height(tree):
if tree = nil:
    return 0
return 1 + Max(Height(tree.left), Height(tree.right))
So, here if we consider a leaf, or just the root node with no children,
Height(tree) value would be 1, 
since Max(Height(tree.left), Height(tree.right)) will return 0.

Size(tree)
if tree = nil:
    return 0
return 1 + Size(tree.left) + Size(tree.right)\
This returns the number of nodes in the tree.




3) Tree Traversal:
Walking a Tree
Often we want to visit the nodes of a tree in a particular order.
For example, print the nodes of the tree.
Two main ways to traverse a tree are:

Depth-first: 
We completely traverse one subtree before exploring a sibling sub-tree

Breadth-first:
We traverse all nodes at one level, before progressing to next level.


Depth-first:
InOrderTraversal(tree)
if tree = nil:
    return 
InOrderTraversal(tree.left)
Print(tree.key)
InOrderTraversal(tree.right)
//This prints all the elements in the binary tree in Alphabetical order.
//Sorted order print.
//InOrder is usually defined for Binary Trees.
//What if we had 3 children???


Depth-first:
PreOrderTraversal(tree):
if tree=nil:
    return
Print(tree.key)
PreOrderTraversal(tree.left)
PreOrderTraversal(tree.right)
//For general, they are well defined. 
It will work even if the nodes have 2 or more children.


Depth-first:
PostOrderTraversal(tree)
if tree=nil:
    return 
PostOrderTraversal(tree.left)
PostOrderTraversal(tree.right)
Print(tree.key)
//In Post-order traversal, we evaluate all children fully, before evaluating
a node itself.


Breadth-first:
LevelTraversal(tree)
if tree=nil:
    return
Queue q
q.Enqueue(tree)
while not q.Empty():
    node <- q.Dequeue()
    Print(node)
    if node.left != nill:
        q.Enqueue(node.left)
    if node.right != nil:
        q.Enqueue(node.right)
    

Summary:
Trees are used for lots of different things
Trees have a key and children.
Trees walks: DFS (pre-order, in-order, post-order) and BFS
When working with a tree, recursive algorightms are common.
In Computer Science, trees grow down.