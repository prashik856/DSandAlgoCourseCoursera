Dynamic Arrays:
Problem: static arrays are static!

int my_array[100]

Semi-solution: dynamically-allocated arrays:
int *my_array = new int[size]

Problem: might not know max size when allocating an array

All problems in computer science can be solved by another level of indirection.

Solution: dynamic arrays (also known as resizable arrays)
Idea: Store a pointer to dynamically allocated array, and replace it with
a newly-allocated array as needed.


Definition:
Dynamic Array:
Abstract data type with the following operations (at a minimum):
Get(i) : returns element at location i*
Set(i,val): Sets element i to val*
Both of these Operations MUST be constant time.
PushBack(val): Adds val to the end.
Remove(i): Removes element at location i.
Size(): The number of elements.


Implementation
Store:
-> arr: dynamically-allocated array
-> capacity: size of the dynamically-allocated array
-> size: number of elements currently in the array


Dynamic Array Resizing

arr[] size: 0, capacity:2
PushBack(a)
PushBack(b)
arr[] size: 2, capacity:2
PushBack(c): we need to add new memory to the pointer, and then copy the
elements of last array to this array, and delete the last array.
Now, new dynamically allocated array is size:2, capacity:4.
Again, we need to allocate a new size, so that the capacity now is 8.
That's how Dynamically allocated arrays are used to create Dynamic Arrays.

Get(i):
if i<0 or i>=size:
    Error: index out of range
return arr[i]

Set(i,val)
if i<0 or i>=size:
    Error: index out of range
arr[i] = val

PushBack(val):
if size = capacity:
    allocate new_arr[2*capacity]
    for i from 0 to size-1:
        new_arr[i] <- arr[i]
    free arr
    arr <- new_arr;
    capacity <- 2*capacity
arr[size] <- val
size <- size + 1

Remove(i)
if i<0, or i>=size:
    Error: index out of range
for j from i to size-2:
    arr[j] <- arr[j+1]
size <- size - 1

Size():
return size


Common Implementations:
c++ : vector
Java: ArrayList
Python: list(the only kind of array)

Runtimes:
Get(i) | O(1)
Set(i, val) | O(1)
PushBack(val) | O(n) (worst case)
Remove(i) | O(n)
Size()| O(1)

Summary:
-> Unlike static arrays, dynamic arrays can be resized.
-> Appending a new element to a dynamic array is often constant time,
but can take O(n)
-> Some space is wasted.
