Pseudo Code of Binary Max Heap Datastructure.

General Settings:
1. maxSize is the maximum number of elements in the heap
2. size is the size of the heap
3. H[1...maxSize] is an array of length maxSize where heap occupies the first size elements.

E.g. when we don't have all leafs in the binary max heap DS.
Assume, height of our tree is 4.
Then, max number of nodes = 1 + 2 + 4 + 8 = 15
Then, if we only have 2 leafs, then our values are as follows:
size = 9,
maxSize = 15.

We already know, for any value, we can compute the value of it's parent, 
and value of it's 2 children.
Thus, we can access these values from the given array.

Now,
Parent(i):
return floow(i/2)

LeftChild(i):
return 2i

RightChild(i):
return 2i + 1

SiftUp(i)
while i>1 and H[Parent(i))] < H[i]:
    swap H[Parent(i)] and H[i]
    i <- Parent(i)

SiftDown(i):
maxIndex <- i
l <- LeftChild(i)
if l <= size and H[l] > H[maxIndex]:
    maxIndex <- l
r <- RightChild(i)
if r <= size and H[r] > H[maxIndex]:
    maxIndex <- r
if i != maxIndex:
    swap H[i] and H[maxIndex]
    SiftDown(maxIndex)

Insert(p):
if size = maxSize:
    return ERROR
siz <- size + 1
H[size] <- p
SiftUp(size)

ExtractMax():
result <- H[1]
H[1] <- H[size]
size <- size - 1
SiftDown(1)
return result

Remove(i):
H[i] <- +veInfinity
SiftUp(i)
ExtractMax()


ChangePriority(i,p):
oldp <- H[i]
H[i] <- p
if p > oldp:
    Siftup(i)
else:
    SiftDown(i)

Summary:
The resulting implementation is
> fast: all operations work in time O(log(n)) (GetMax even works in O(1))
> Space Efficient: we store an array of priorities; parent-child connections are not stored,
but are computed on the fly
> easy to implement: all operations are implemented in just a few lines of code.

