Hash Tables:
Hash Functions

Good Hash Functions.


Phone Book.
Design a data structure to store your contacts: names of people along with their phone numbers.
The data structure should be able to do the following quickly.

-> Add and delete contacts
-> Lookup the phone number by name,
-> Determine who is calling given their phone number.

We need two Maps:
(phone number -> name) and (name -> phone number)
: Implement these Maps as hash tables
: First, we will focus on the Map from phone numbers to names


Direct Addressing:
int(123-45-67) = 1234567
Create an array Name of size 10^(L) where L is the maximum allowed phone number.
Store the name corresponding ot phone number P in Name[int(P)]
If no contact with phone number P, Name[int(P)] = N/A

Operations run in O(1)
Memory usage: O(10^L), where L is the maximum length of a phone number.
Problematic with international number of length 12 and more: we will need 10^12 bytes = 1 TB,
to store one person's phone book - this won't fit in anyone's phone.


Chaining:
Select hash function h with cardinality m.
Create array Name of size m
Store chains in each cell of the array Name
Chain Name[h(int(P))] contains the name for phone number P


Parameters:
n: n phone numbers stored
m - cardinallity of the hash function
c - length of the longest chain
O(n + m): memory is used
alpha = n/m is called load factor
Operations run in time O(c + 1)
We want small m and c!


First Digits:
For the map from phone numbers to names, select m = 1000
Hash function: take first three digits
h(800-123-45-67)= 800
Problem: area code: will be same for many people.
What about last three digits:
Hash function: take last three digits:
h(800-123-45-67)= 567

Problem: if many phone numbers end with three zeros


Random Value:
m = 1000
Hash Function: random number between 0 and 999
Uniform distribution of hash values!
But: Different value when hash function called again- we won't be able to find anything!
Hash function must be dterministic


Good Hash Functions:
- Deterministic
- Fast to compute
- Distributes keys well into different cells
- Few collisions


No Universal hash function:
Lemma: if number of possible keys is big (|U| >> m), for any hash function h there is a bad
input resulting in many collisions
Why is that?

Let U, and m = 3, so our U will be divided into 3(h(k)=0, h(k)=1, h(k)=2).
We select the largest group, assuming h(k)=1 is the biggest, it will be atleast of size 1/3*U
Can be even bigger.
So, as U>>m, so 1/m*U will be a great value. 
So, one of the group will always have a bad input.

