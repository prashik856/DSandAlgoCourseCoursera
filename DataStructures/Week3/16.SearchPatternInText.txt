Search Pattern in Text
Hash Tables: String Search

Searching for Patterns:
Given a text T (book, website, facebook profile) and a pattern P (word, phrase, sentence), find all occurrences 
of P in T.

Examples:
: your name on a website
: Twitter messages about your company.
: Detect files infected by virus: code patterns


Substring Notation:

Definition:
Denote by S[i..j] the substring of string S starting in position i and ending in position j.
both i and j are included. S[i:j]


Examples:
if S = "abcde" then,
S[0..4] = "abcde"
S[1:3] = "bcd"
S[2:2] = "c"


Find Pattern in Text
Input: String T and P.
Output: All such positions i in T,
0 <= i <= |T| - |P| that T[i..i + |P| -1] = P


Naive Algorithm:
For each position i from 0 to |T| - |P|, check character by character whether 
T[i..i + |P| - 1] or not. 
If yes, append i to the result.


AreEqual(S1,S2)
if |S1| != |S2|:
    return false
for i from 0 to |S1|-1:
    if S1[i] != S2[i]:
        return false
return true

FindPatternNaive(T,P)
result = empty list
for i from 0 to |T| - |P|:
    if AreEqual(T[i..i + |P| -1], P):
        result.Append(i)
return result

Running Time:
Lemma:
Running time of FindPatternNaive(T,P) is O(|T|*|P|)

Proof:
Each AreEqual call is O(|P|)
|T| - |P| + 1 calls of AreEqual total to O((|T| - |P| + 1)|P|) = O(|T|*|P|)


Bad Example:
If T = "aaa...aa" and P = "aaa...ab", then |T|>>|P|, then for each position i in T from 0 to |T| - |P| the call to 
AreEqual has to make all |P| comparisions.
this is because T[i..i + |P| -1] and P differ only in the last character.
Thus in this case the naive algorithm runs in time O(|T|*|P|)
