BinarySearch:
e.g. Dictionary:
Everything is in order.

SEARCHING IN A SORTED ARRAY:
INPUT: A sorted array A[low...high]
        (for all low <= i < high: A[i] <= A[i+1])
        a key k.
Output: An index, i, (low <= i <= high) where A[i]= k,
        otherwise, the greatest index i, where A[i]<k.
        Otherwise (k<A[low]), the result is low-1.
        [Return valid position of the element]

BinarySearch(A, low, high, key){
    if high< low:
        return low -1
mid = [low + floor((high-low)/2)]

if key = A[mid]:
    return mid
if key<A[mid]:
    return BinarySearch(A, low, mid-1, key)
else 
    return BinarySearch(A, mid+1, high, key)
}

SUMMARY:
1) Break problem into non-overlapping subproblems of the same type.
2) Recursively solve those subproblems.
3) Combine results of those subproblems.

RUNTIME:
Binary Search Recurrence Relation:
T(n) = T(floor(n/2)) + c
Worst case: Don't find an element.
Base case: T(0) (empty array)

log(base 2)(n+1).
Total work is : log(base2)(N+1)*c i.e. O(log(n)).

ITERATIVE VERSION:
BinarySearchIt(A, low, high, key){
    while low<=high:
        mid = floor(low + (high-low)/2)
        if key[mid] = A[mid]:
            return mid
        else if key < A[mid]:
            high = mid -1
        else
            low = mid+1
    return low-1
}

Real life example:

Augmented array(Storing only indexes rather than storing the data.).

Summary:
The runtime of binary searc is O(log(n))
