1) The problem:
Many children came to a celebration. Organize them into the minimum possible number of groups such that the age of any two children in the same group differ by at most one year.

Naive algorithm:
MinGroups(C){
    m <- len(C)
    for each partition into groups
    C = G1 U G2 U .... U Gk:
        good <- true
        for i from 1 to k:
            if max(Gi) - min(Gi) > 1:
                good <- false
        if good:
            m <- min(m,k)
return m
}

Lemma:
the number of operations in MinGroups(C) is at least 2^n, where n is the number of children in C.

Proof:
Consider just partitions in 2 groups:
C = G1 U G2
For each G1 c C,G2 = C\G1
Size of C is n
Each item can be included or excluded from G1.
So there can be 2^n different G1.
Thus, at least 2^n operations.

Asymptotics:
Naive algo works in time f(2^n),
for n=50, it is atlease 2^50 operations.


2) Efficient Algorithm:
Covering points by segments.
Inputs: A set of n points x1,....,xn which belongs to R.
Output: The minimun numbers of segments of unit length needed to cover all the points

WE have a line of some points
Safe move: Cover the leftmost point with a unit segment with left end in this point.
How to prove it? Pictorial representation.

3) Implementation of Greedy Algorithm:
Assume x1 <= x2 <= .... <= xn
PointsCoverSorted(x1,....,xn)
R <- {}, i <- 1
while i<=n:
    [l,r] <- [xi, xi + 1]
    R <- R U {[l,r]}
    i <- i+1
    while i<=n and xi <= r:
        i <- i+1
return R
This algo works in Linear time O(n).

Lemma:
The running time of PointsCoverSorted is O(n).
Proof:
i changes from 1 to n.
for each i, at most 1 new segment
Overall, running time is O(n).

Total Running Time:
PointsCoverSorted works in O(n) time.
Sort {x1, x2, ...., xn}, then call PointsCoverSorted.
Sorting takes O(nlog(n)) time.
So, Sort + PointsCoverSorted is O(nlog(n))

Asymptotics:
Straightforward solution is O(2^n).
Very long for n=50.
Sort + Greedy is O(nlog(n)).
Fast for n=10000000
Huge improvement.

Conclusion:
Straightforward solution is exponential
Important to reformulate the problem in mathematical terms
safe move is to cover leftmost point 
sort in O(nlog(n)) + greedy is O(n)