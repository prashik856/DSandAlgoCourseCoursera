KRUSKAL'S ALGORITHM

Kruskal's Algorithm:
    repeatedly add to X the next lightest edge e that doesn't produce a cycle 
    at any point of time, the set x is a forest, that is, a collection of trees
    The next edge e connects two different trees - say T1 and T2 
    the edge e is the lightest between T1 and V - T1, hence adding e is safe 

Implementation Details:
    use disjoint sets data structure 
    initially, each vertex lies in a separate set 
    each set is the set of vertices of a connected component
    to check whether the current edge {u,v} produces a cycle, we check whether u and v belongs to the same set.

Example:
    Need to sort weight of each edges 

Kruskal(G):
    for all u in V:
        MakeSet(v)
X = empty set 
sort the edges E by weight 
for all {u,v} belonging to E in non-decreasing weight order:
    if Find(u) != Find(v):
        add{u,v} to X 
        Union(u,v)
return X 

Running Times:
    Sorting edges:
        O(E*log(V))
    Processing Edges: 
        O(E * log(V))
    Total Running Time: O(E*log(V))

