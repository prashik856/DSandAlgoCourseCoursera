COMPUTING THE DISTANCE

BidirectionalDijkstra(G, s, t):
Gr = ReverseGraph(G)
Fill dist, distR with INF for each node
dist[s] = 0, dist[t] = 0;
Fill prev, prevR with None for each node
proc = empty, procR = empty
do:
	v = ExtractMin(dist)
	Process(v,G,dist,prev,proc)
	if v in procR:
		return ShortestPath(s, dist, prev, proc, t, ...)
	Vr = ExtractMin(distR)
	repeat symmetrically for vR as for v
while true

Relax(u,v,dist,prev):
	if dist[v] > dist[u] + w(u,v):
		dist[v] = dist[u] + w(u,v)
		prev[v] = u

Process(u,G,dist,prev,proc)
for(u,v) in Edges:
	Relax(u,v,dist,prev)
proc.Append(u)

ShortestPath(s,dist,prev,proc,t,distR,prevR, procR):
distance = +INF
ubest = None
for u in proc + procR:
	if dist[u] + distr[u] < distance:
		ubest = u
		distance = dist[u] + distR[u]
path = empty
last = ubest
while last !=s:
	path.Append(last)
	last = prev[last]
path = Reverse(path)
last = ubest
while last != t:
	last = prevr[last]
	path.Append(last)
return (distance, path)



Conclusion
	- worst case running time of biferectional dijkstra is the same as the dijkstra
	- Speedup in practicd depends on the graph
	- Memory consumption is 2x to store G and Gr
	- You'll see the speedup on social network graph in programming assignment


