Binary Search Trees

Learning Objectives:
provide examples of the sorts of problems we hope to solve with BST
Show why data structures that we have already covered are insufficient


Local Search:
Dictionay Search
Fina ll words that start with given string of letters

Date Ranges:
Find all emails recieved in a given period


Closest height:
Find the person in your class whose height is closest to yours


Local Search:
A local search datastructures stores a number of elements each with a key coming from an ordered set.
It supports operations:
RangeSearch(x,y): Return all elements with keys between x and y
nearestneighbours(z): Returns the element with keys on either side of z.

Example:
1 4 6 7 10 14 15

RangeSearch(5,12): 6 7 10
nearestneighbours(3): 1, 4



Dynamic Data Structure:
We would also like to be able to modify the data structure as we go.
Insert(x): Adds a element with key x
Delete(x): Removes the element with key x



Example:
1 4 6 10 13 15

Insert(3):
1 3 4 6 10 13 15

Delete(10):
1 3 4 6 13 15



Problem:
If an empty data structure is given these commands what does it output at the end:
Insert(3):
blah blah inserts
Delete(6)
Insert(7)
nearestneighbours(7)



Attempts:
hash table?
RangeSearch?: Impossible
Nearestneighbours: Impossible
Insert : yes
Delete: yes


Array?:
RangeSearch: O(n)
Nearestneighbours: O(n)
Insert: O(1)
Delete: O(1)


Sorted array?
RangeSearch: O(log(n))
NearestNeighbours: O(log(n))
Insert: O(n)
Delete: O(n)


LinkedList?
RangeSearch: O(n)
NearestNeighbours: O(n)
Insert: O(1)
Delete: O(1)


We need something new:
Previous data structure won't work here.

