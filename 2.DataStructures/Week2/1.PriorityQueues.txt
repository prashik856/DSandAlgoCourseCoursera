Priority Queues:

Learning Objectives:
We will be able to
-> Implement a priority queue
-> Explain what is going on inside built-in implementations:
    -> c++ : priority_queue
    -> java : PriorityQueue
    -> python: heapq


Queue:
A queue is an abstract data type supporint the following main operations:
-> PushBack(e) adds an element to the back of the queue;
-> PopFront() extracts an element from the front of the queue

Priority Queue (Informally)
A priority queue is a generalization of a queue where each element is
assigned a priority and elements come out in order by priority

Typical Use Case:
Scheduling jobs
-> Want to process jobs one by one in order of decreasing priority.
-> While the current job is processed, new jobs may arrive.
-> To add a job to the set of scheduled jobs, call Insert(job).
-> To process a job with the highest priority, get it by calling ExtractMax().

Priority Queue (Formally):
Priority queue is an abstract data type supporting the following main operations:
-> Insert(p) adds a new element with priority p.
-> ExtractMax() extracts an element with maximum priority.

Additional Operations:
-> Remove(it) removes an element pointed by an iterator it
-> GetMax() returns an element with maximum priority (without changing the set of elements)
-> ChangePriority(it, P) changes the priority of an element pointed by it to p.


Algorithms that Use Priority Queues:
1. Dijsktra's Algorithm: finding a shorted path in a graph
2. Prim's Algorithm: constructing a minimum spanning tree of a graph
3. Huffman's algorithm: constructing an optimum prefix-free encoding of a string.
4. Heap sort: sorint a given sequence.



I. Naive Implementations:
E.g. try to make it using. Unsorted Array/list
In this case,
Insert(e): add e to the end
            running time: O(1)
ExtractMax():
    -> Scan the array/list
    -> running time: O(n)

Using Sorted Array:
In this case,
ExtractMax():
    -> extract the last element
    -> running time: O(1)
Insert(e):
    -> Find a position for e (O(log(n)) by using binary search),
    shift all elements to the right by 1(O(n)), insert e(O(1)).
    -> running time: O(n)

Using Sorted List?:
ExtractMax():
    -> Extract the last element
    -> running time: O(1)
Insert(e):
    -> Find a position for e(O(n): note: cannot use binary search), insert e(O(1)).
    -> Running time: O(n)


Summary:
                    Insert          ExtractMax
Unsorted Array/List:    O(1)        O(n)
Sorted Array/list:      O(n)        O(1)
Binary Heap:            O(log(n))   O(log(n))
