Priority Queues: Binary Heaps

Definition:
Binary Max-heap is a binary tree (each node has zero, one or two children),
where the value of each node is at least the values of its children.

In other words:
For each edge of the tree, the value of the parent is at least the value of the child.

E.g. heap
42 -> 29 -> 14 -> 11 
         -> 7
   -> 18 -> 18 -> 12
               -> 7
If we go from bottom to top, the values should always increase.

E.g. Not a heap (A simple example is a Binary Tree)


1. Basic Operations in Binary Max Heaps
GetMax(): return the root value: O(1)
Insert:
> attach a new node to any leaf?
> But this may violate the heap property!
> To fix this, we let the new node shift up.
> For this, we swap the problematic node with it's parent until the
property is satisfied.
> If the heap property is still not satisfied, we then again need to 
swap the child and it's parent.
> Invariant: heap property is violated on at most one edge.
> When we do a 'SiftUp', the problematic edge gets closer to the root.
Running time: O(Tree height)

ExtractMax(): 
replace the root with any leaf.
We cannot just detach the root node, we need to do something about it.
To do this, we do the following:
> replace the root with any leaf
> again, this way violate the heap property
> To fix it, we let the problematic node 'Sift Down'.
> For this, we swap the problematic node with larger child until the heap property is satisfied.
> Again, if we have violation, we do the same. We do Sift Down.
> We swap with the larger child which automatically fixes one of the two bad edges.
Running Time: O(tree height)

ChangePriority():
Change the proprity and let the changed element sift up or down depending on
whether its priority decreased or increased.
> Depending on the final value, after the change, we will have to either Sift up
or sift down, to balance the tree.
Running time: O(tree height)

Remove():
Change the priority of the lement to INF (+ infinity),
let it sift up, and then call ExtractMax().
Running Time: O(tree height)


Summary:
> GetMax() works in time O(1), all other operations work in time O(tree height)
> We definitely want a tree to be shallow
